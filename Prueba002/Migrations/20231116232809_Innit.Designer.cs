// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prueba002.Models.dbModels;

#nullable disable

namespace Prueba002.Migrations
{
    [DbContext(typeof(PropuestadeBasedeDatosdelProyectoFinalContext))]
    [Migration("20231116232809_Innit")]
    partial class Innit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Album", b =>
                {
                    b.Property<int>("IdAlbum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlbum"), 1L, 1);

                    b.Property<string>("FotoAlbum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdArtista")
                        .HasColumnType("int");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int");

                    b.Property<string>("NombreAlbum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAlbum");

                    b.HasIndex("IdArtista");

                    b.HasIndex("IdGenero");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripciónPersonal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Artistum", b =>
                {
                    b.Property<int>("IdArtista")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArtista"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdArtista");

                    b.ToTable("Artista");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.ComentaioAlbum", b =>
                {
                    b.Property<int>("IdComentarioAlbum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComentarioAlbum"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaComentario")
                        .HasColumnType("date");

                    b.Property<int>("IdAlbum")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdComentarioAlbum");

                    b.HasIndex("IdAlbum");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ComentaioAlbum");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Favorito", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IdAlbum")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFavorito")
                        .HasColumnType("date");

                    b.HasKey("IdUsuario", "IdAlbum")
                        .HasName("PK_Favorito_1");

                    b.HasIndex("IdAlbum");

                    b.ToTable("Favorito");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Genero", b =>
                {
                    b.Property<int>("IdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGenero"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenGenero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGenero");

                    b.ToTable("Genero");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.ListaAlbum", b =>
                {
                    b.Property<int>("IdLista")
                        .HasColumnType("int");

                    b.Property<int>("IdAlbum")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAgregado")
                        .HasColumnType("date");

                    b.HasKey("IdLista", "IdAlbum");

                    b.HasIndex("IdAlbum");

                    b.ToTable("Lista-Album");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Listum", b =>
                {
                    b.Property<int>("IdLista")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLista"), 1L, 1);

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("NombreLista")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLista");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Lista");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.OpcionRespuestum", b =>
                {
                    b.Property<int>("IdOpcionPredunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOpcionPredunta"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int");

                    b.HasKey("IdOpcionPredunta");

                    b.HasIndex("IdPregunta");

                    b.ToTable("OpcionRespuesta");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.PreguntaTest", b =>
                {
                    b.Property<int>("IdPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPregunta"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTest")
                        .HasColumnType("int");

                    b.HasKey("IdPregunta")
                        .HasName("PK_PreguntasTest");

                    b.HasIndex("IdTest");

                    b.ToTable("PreguntaTest");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.RespuestaPreguntaTest", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IdOpcionRespuesta")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("date");

                    b.HasKey("IdUsuario", "IdOpcionRespuesta");

                    b.HasIndex("IdOpcionRespuesta");

                    b.ToTable("RespuestaPreguntaTest");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Sugerencium", b =>
                {
                    b.Property<int>("IdSugerencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSugerencia"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaSugerencia")
                        .HasColumnType("date");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("TituloSugerencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSugerencia");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Sugerencia");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Test", b =>
                {
                    b.Property<int>("IdTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTest"), 1L, 1);

                    b.Property<string>("TituloTest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTest");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Album", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.Artistum", "IdArtistaNavigation")
                        .WithMany("Albums")
                        .HasForeignKey("IdArtista")
                        .IsRequired()
                        .HasConstraintName("FK_Album_Artista");

                    b.HasOne("Prueba002.Models.dbModels.Genero", "IdGeneroNavigation")
                        .WithMany("Albums")
                        .HasForeignKey("IdGenero")
                        .IsRequired()
                        .HasConstraintName("FK_Album_Genero");

                    b.Navigation("IdArtistaNavigation");

                    b.Navigation("IdGeneroNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.ComentaioAlbum", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.Album", "IdAlbumNavigation")
                        .WithMany("ComentaioAlbums")
                        .HasForeignKey("IdAlbum")
                        .IsRequired()
                        .HasConstraintName("FK_ComentaioAlbum_Album");

                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("ComentaioAlbums")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_ComentaioAlbum_Usuario");

                    b.Navigation("IdAlbumNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Favorito", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.Album", "IdAlbumNavigation")
                        .WithMany("Favoritos")
                        .HasForeignKey("IdAlbum")
                        .IsRequired()
                        .HasConstraintName("FK_Favorito_Album");

                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Favoritos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Favorito_Usuario");

                    b.Navigation("IdAlbumNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.ListaAlbum", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.Album", "IdAlbumNavigation")
                        .WithMany("ListaAlbums")
                        .HasForeignKey("IdAlbum")
                        .IsRequired()
                        .HasConstraintName("FK_Lista-Album_Album");

                    b.HasOne("Prueba002.Models.dbModels.Listum", "IdListaNavigation")
                        .WithMany("ListaAlbums")
                        .HasForeignKey("IdLista")
                        .IsRequired()
                        .HasConstraintName("FK_Lista-Album_Lista");

                    b.Navigation("IdAlbumNavigation");

                    b.Navigation("IdListaNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Listum", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Lista")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Lista_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.OpcionRespuestum", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.PreguntaTest", "IdPreguntaNavigation")
                        .WithMany("OpcionRespuesta")
                        .HasForeignKey("IdPregunta")
                        .IsRequired()
                        .HasConstraintName("FK_OpcionRespuesta_PreguntaTest");

                    b.Navigation("IdPreguntaNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.PreguntaTest", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.Test", "IdTestNavigation")
                        .WithMany("PreguntaTests")
                        .HasForeignKey("IdTest")
                        .IsRequired()
                        .HasConstraintName("FK_PreguntasTest_Test");

                    b.Navigation("IdTestNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.RespuestaPreguntaTest", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.OpcionRespuestum", "IdOpcionRespuestaNavigation")
                        .WithMany("RespuestaPreguntaTests")
                        .HasForeignKey("IdOpcionRespuesta")
                        .IsRequired()
                        .HasConstraintName("FK_RespuestaPreguntaTest_OpcionRespuesta");

                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("RespuestaPreguntaTests")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_RespuestasPreguntasTest_Usuario");

                    b.Navigation("IdOpcionRespuestaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Sugerencium", b =>
                {
                    b.HasOne("Prueba002.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Sugerencia")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Sugerencia_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Album", b =>
                {
                    b.Navigation("ComentaioAlbums");

                    b.Navigation("Favoritos");

                    b.Navigation("ListaAlbums");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.ApplicationUser", b =>
                {
                    b.Navigation("ComentaioAlbums");

                    b.Navigation("Favoritos");

                    b.Navigation("Lista");

                    b.Navigation("RespuestaPreguntaTests");

                    b.Navigation("Sugerencia");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Artistum", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Genero", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Listum", b =>
                {
                    b.Navigation("ListaAlbums");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.OpcionRespuestum", b =>
                {
                    b.Navigation("RespuestaPreguntaTests");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.PreguntaTest", b =>
                {
                    b.Navigation("OpcionRespuesta");
                });

            modelBuilder.Entity("Prueba002.Models.dbModels.Test", b =>
                {
                    b.Navigation("PreguntaTests");
                });
#pragma warning restore 612, 618
        }
    }
}
